const MusicUtils = require('../utils/musicUtils');

module.exports = {
    data: {
        name: 'skipto',
        aliases: ['jumpTo', 'jump', 'pularPara'],
        description: 'Pula para uma m√∫sica espec√≠fica na fila',
        usage: '!skipto <posi√ß√£o>'
    },

    async execute(message, args, client) {
        const guildId = message.guild.id;
        const queue = client.queues.get(guildId);
        const player = client.players.get(guildId);

        // Verifica√ß√µes
        if (!message.member.voice.channel) {
            const embed = MusicUtils.createErrorEmbed(
                'Erro de Canal',
                'Voc√™ precisa estar em um canal de voz para usar este comando!'
            );
            return message.reply({ embeds: [embed] });
        }

        if (!queue || queue.length <= 1) {
            const embed = MusicUtils.createErrorEmbed(
                'Fila Insuficiente',
                'N√£o h√° m√∫sicas suficientes na fila para pular!'
            );
            return message.reply({ embeds: [embed] });
        }

        if (!args.length) {
            const embed = MusicUtils.createErrorEmbed(
                'Posi√ß√£o Obrigat√≥ria',
                'Por favor, especifique a posi√ß√£o da m√∫sica na fila!\n\n**Exemplo:** `!skipto 3`\n\nUse `!queue` para ver as posi√ß√µes.'
            );
            return message.reply({ embeds: [embed] });
        }

        const position = parseInt(args[0]);

        // Validar posi√ß√£o
        if (isNaN(position) || position < 2 || position > queue.length) {
            const embed = MusicUtils.createErrorEmbed(
                'Posi√ß√£o Inv√°lida',
                `Por favor, forne√ßa uma posi√ß√£o v√°lida entre **2** e **${queue.length}**.\n\n*Use \`!skip\` para pular apenas uma m√∫sica.*`
            );
            return message.reply({ embeds: [embed] });
        }

        // Remover todas as m√∫sicas antes da posi√ß√£o desejada
        const skippedSongs = queue.splice(1, position - 2);
        const targetSong = queue[1];

        // Parar o player para triggerar a pr√≥xima m√∫sica
        if (player) {
            player.stop();
        }

        const embed = MusicUtils.createSuccessEmbed(
            'Pulando para M√∫sica',
            `‚è≠Ô∏è Pulando **${skippedSongs.length}** m√∫sica${skippedSongs.length !== 1 ? 's' : ''} para tocar:\n\nüéµ **${targetSong.title}**`
        );

        embed.addFields(
            { name: 'üìç Nova Posi√ß√£o', value: '2 (pr√≥xima)', inline: true },
            { name: 'üóëÔ∏è M√∫sicas Puladas', value: skippedSongs.length.toString(), inline: true },
            { name: 'üë§ Solicitado por', value: message.author.toString(), inline: true }
        );

        message.reply({ embeds: [embed] });
    }
};
